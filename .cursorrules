# Cursor Rules for Elevate Roasting

## Project Context
This is an open source coffee roasting website built for learning and inspiration. It demonstrates modern web development practices for small businesses with a clean, modular architecture.

## Core Principles
- **Simplicity First**: Build the simplest thing that could possibly work
- **Functional Code**: Prefer functional programming patterns over complex OOP
- **Modular Design**: Keep code organized in separate concerns (config, utils, components)
- **Educational Value**: Write clear, well-documented code that others can learn from
- **Extensibility**: Design for future integrations (Stripe, Instagram, email services)

## Code Style Guidelines

### JavaScript
- Use **single quotes** for strings: `'string'`
- Use **type hints** where possible (JSDoc comments)
- Prefer **functional patterns** over complex classes
- Use **descriptive variable names** that explain their purpose
- Write **extensive comments** explaining design decisions, rationale, and tradeoffs
- Avoid redundant comments like "Initialize the application" - explain WHAT and WHY
- **IGNORE LINTER ERRORS** - focus on functionality over strict linting

### CSS
- Use **CSS custom properties** for theming (`:root` variables)
- Follow **component-based** class naming (`.btn-primary`, `.card`)
- Include **responsive design** with `@media` queries
- Add **accessibility features** (focus states, ARIA labels)
- Use **utility classes** for common patterns

### HTML
- Use **semantic HTML5** elements
- Include **meta tags** for SEO and social sharing
- Keep **structure clean** and readable
- Use **data attributes** for JavaScript hooks when needed

## Architecture Patterns

### Configuration-Driven Development
- Store all site content in `config/site-config.js`
- Make features configurable via feature flags
- Use configuration for navigation, content, and integrations

### Utility-First Approach
- Create reusable utility functions in `js/utils.js`
- Organize utilities by domain (dom, form, string, date, etc.)
- Keep utilities pure and testable

### Modular JavaScript
- Use class-based main application (`ElevateRoastingApp`)
- Separate concerns into different modules
- Use event-driven programming patterns

## File Structure
```
/
├── index.html              # Main entry point
├── css/
│   └── styles.css          # All custom styles
├── js/
│   ├── app.js             # Main application logic
│   └── utils.js           # Utility functions
├── config/
│   └── site-config.js     # Site configuration
├── assets/                # Images, fonts, etc.
├── coffee/                # Coffee-related pages
├── about/                 # About pages
└── .github/
    └── workflows/         # CI/CD pipelines
```

## Best Practices

### Comments and Documentation
- Explain **design decisions** and **rationale**
- Document **error handling strategies**
- Explain **performance considerations**
- Avoid obvious comments - focus on **why** not **what**
- Use **JSDoc** for function documentation

### Error Handling
- Use **graceful degradation** for missing features
- Provide **fallback content** for dynamic elements
- Log errors for **debugging** but don't break user experience
- Use **feature flags** for safe deployment

### Performance
- Use **lazy loading** for images and content
- Minimize **DOM manipulation**
- Use **event delegation** for dynamic content
- Optimize **CSS selectors** and avoid expensive operations

### Accessibility
- Include **focus management** for navigation
- Use **semantic HTML** elements
- Provide **alt text** for images
- Ensure **keyboard navigation** works
- Test with **screen readers**

## Future Integrations

### Payment Processing (Stripe)
- Use **feature flags** to enable/disable
- Implement **subscription models** (weekly, bi-weekly, monthly)
- Handle **webhook events** for payment status
- Provide **fallback** for when Stripe is disabled

### Social Media (Instagram)
- Fetch **recent posts** via API
- Display **coffee photos** and stories
- Handle **API rate limits** gracefully
- Cache **responses** to avoid hitting limits

### Email Services
- Collect **email addresses** for marketing
- Send **welcome emails** to new subscribers
- Handle **unsubscribe** requests
- Integrate with **email service providers**

## Common Patterns

### Configuration Object
```javascript
const config = {
  site: {
    name: 'Elevate Roasting',
    description: 'Artisanal coffee roasting',
    // ... other site metadata
  },
  features: {
    stripeEnabled: false,
    instagramEnabled: false,
    // ... feature flags
  }
};
```

### Utility Functions
```javascript
const utils = {
  dom: {
    getElement: (selector) => document.querySelector(selector),
    createElement: (tag, className) => {
      const element = document.createElement(tag);
      if (className) element.className = className;
      return element;
    }
  },
  // ... other utility modules
};
```

### Event Handling
```javascript
// Use event delegation for dynamic content
document.addEventListener('click', (e) => {
  if (e.target.matches('.btn-primary')) {
    handleButtonClick(e.target);
  }
});
```

## When Suggesting Code

### Do's
- Suggest the **simplest possible solution** that works
- Use **existing patterns** from the codebase
- Include **clear comments** explaining the approach
- Consider **future extensibility**
- Follow the **established naming conventions**
- Write **educational code** that others can learn from

### Don'ts
- Don't over-engineer solutions
- Don't introduce unnecessary dependencies
- Don't ignore existing code patterns
- Don't write redundant or obvious comments
- Don't sacrifice readability for cleverness
- Don't ignore accessibility and performance

## Testing Guidelines
- Write **unit tests** for utility functions
- Test **user interactions** and form submissions
- Verify **responsive design** across devices
- Test **accessibility** with keyboard navigation
- Use **manual testing checklist** for critical paths

## Deployment Considerations
- Use **static hosting** (GitHub Pages, Netlify, Vercel)
- Configure **custom domain** and SSL
- Set up **environment variables** for API keys
- Implement **analytics** for user insights
- Use **CDN** for asset delivery

## Pipeline
- When it is absolutely beneficial, add to the Github Workflows pipeline for automated testing. Prioritize what is most important to the development workflow.

## Remember
- **Keep it simple** - avoid over-engineering
- **Document decisions** - explain the why, not just the what
- **Think extensible** - design for future features
- **Write for learning** - others will study this code
- **Test thoroughly** - ensure reliability for users

This project serves as both a business website and an educational resource for modern web development practices.
